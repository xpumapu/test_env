#!/usr/bin/tclsh

package require Tclx

source lib/lib-daem.tcl
source lib/lib-cli.tcl
source lib/lib-ls.tcl
source lib/lib-ns.tcl
source daem_lib.tcl

set log_file "/tmp/daem.log"
set pidfile_path "$pidfile_dir/[file tail $argv0].pid"

;# global
set global_app_p [dict create]

set debug 1

;# gets curent date and time
proc get_time {} {
	return [clock format [clock seconds]]
}

;# log message to file
;# dfd - debug file descriptor, open for writing
;# msg - text message
proc log {dfd msg} {
	global debug
	puts $dfd "[get_time]: $msg"
	if {$debug == 1} {
		puts "[get_time]: $msg"
	}
}

proc shutdown {} {
	global global_app_p
	global pidfile_path

	set dfd [dict get $global_app_p log_fd]
	log $dfd "Shutting down..."

	if {[dict exists $global_app_p net_sock]} {
		set ns [dict get $global_app_p net_sock]
		log $dfd "Closing client socket: $ns"
		close $ns
	}
	if {[dict exists $global_app_p server_sock]} {
		set serv_sock [dict get $global_app_p server_sock]
		log $dfd "Closing server socket: $serv_sock"
		close $serv_sock
	}
	if {[file exists $pidfile_path]} {
		log $dfd "Delete file: $pidfile_path"
		file delete $pidfile_path
	}
	log $dfd "Closing log file: $dfd"
	close $dfd
	exit 0
}

proc handle_cmd_get {args gap} {
	upvar #0 $gap global_app_p
	set dfd [dict get $global_app_p log_fd]
	set ns [dict get $global_app_p net_sock]
	set firstarg [lindex $args 0]

	switch $firstarg {
		"ifaces" {
			set l_ifaces [ls_get_ifaces]
			log $dfd "ifaces: $l_ifaces"
			puts $ns "ifaces: $l_ifaces"
		}
		"mac" {
			set l_iface [lindex $args 1]
			set l_mac [ls_get_mac $l_iface]
			log $dfd "$l_iface: $l_mac"
			puts $ns "$l_iface: $l_mac"

		}
		"netns" {
			if {[llength $args] == 1} {
				set ns_list [check_netns_p global_app_p]
				log $dfd "ns list: $ns_list"
				puts $ns "ns list: $ns_list"
				;# xxx
				log $dfd "global: $global_app_p"
			} elseif {[llength $args] == 3} {
				set subcmd [lindex $args 1]
				if {$subcmd == "ifaces"} {
					set ns_name [lindex $args 2]
					set ns_ifaces [get_ns_ifaces $global_app_p $ns_name]
					log $dfd "netns: $ns_name ifaces: $ns_ifaces"
					puts $ns "netns: $ns_name ifaces: $ns_ifaces"
				}
			}
		}
		"quit" {
			log $dfd "quiting..."
		}
		"get" {
			log $dfd "get: $args"
		}
		"pid" {
			log $dfd "pid:[pid]"
		}
		"test" {
			log $dfd "test: $args"
		}
	}
}

proc handle_cmd_netns {args gap} {
	upvar #0 $gap global_app_p
	set dfd [dict get $global_app_p log_fd]
	set ns [dict get $global_app_p net_sock]

	if {[llength $args] == 0} {
		;# list all net ns's
		set ns_list [check_netns_p global_app_p]
		log $dfd "ns list: $ns_list"
		puts $ns "ns list: $ns_list"
		;# xxx
		log $dfd "global: $global_app_p"
		set firstarg "none"
	} else {
		set firstarg [lindex $args 0]
	}

	switch $firstarg {
		"create" {
			set new_ns [lindex $args 1]
			ns_create $new_ns
			set new_ns_fd [ns_open_shell $new_ns]
			dict set global_app_p netns_p $new_ns $new_ns_fd
			log $dfd "new netns: $new_ns"
			puts $ns "new netns: $new_ns"
		}
		"del" {
			set del_ns [lindex $args 1]
			if {[ns_check_exist $del_ns] == 1 } {
				ns_del $del_ns
				log $dfd "del netns: $del_ns"
				puts $ns "del netns: $del_ns"
				log $dfd "before del global_app_p: $global_app_p"
				dict set global_app_p netns_p [dict remove [dict get $global_app_p netns_p] $del_ns]
				log $dfd "after del global_app_p: $global_app_p"
			}
		}
		"ifaces" {
			set ns_name [lindex $args 1]
			set ns_ifaces [get_ns_ifaces $global_app_p $ns_name]
			log $dfd "netns: $ns_name ifaces: $ns_ifaces"
			puts $ns "netns: $ns_name ifaces: $ns_ifaces"
		}
		"none" {
		}
	}
}

proc handle_cmd {cmd args gap} {
	upvar #0 $gap global_app_p
	set dfd [dict get $global_app_p log_fd]

	switch $cmd {
		"none" {
			log $dfd "none"
		}
		"get" {
			log $dfd "get: $args"
			handle_cmd_get $args global_app_p
		}
		"run" {
			log $dfd "run: $args"
		}
		"test" {
			log $dfd "test: $args"
		}
		"netns" {
			log $dfd "netns: $args"
			handle_cmd_netns $args global_app_p
		}
	}
}

proc read_data {gap} {
	upvar #0 $gap global_app_p
	set fd [dict get $global_app_p log_fd]
	set ns [dict get $global_app_p net_sock]

	set status [catch {gets $ns line} result]

	if {$status != 0} {
		log $fd "error reading $ns: $result, closing sock..."
		set global_app_p [dict remove $global_app_p net_sock]
		close $ns
	} elseif {$result >= 0} {
		log $fd "[lindex [info level 0] 0]: >$line<"
		set parcmd [parse_line $line]
		handle_cmd [dict get $parcmd cmd] [dict get $parcmd args] global_app_p
	} elseif {[eof $ns] == 1} {
		log $fd "sock $ns: eof, closing sock..."
		set global_app_p [dict remove $global_app_p net_sock]
		close $ns
	} else {
		log $fd "impossible"
	}
}

;# server function processing each new connected client
proc server_process {gap ns addr port} {
	upvar #0 $gap global_app_p
	fconfigure $ns -buffering line -blocking 0

	log [dict get $global_app_p log_fd] "server process: chan $ns addr $addr port $port"
	dict set global_app_p net_sock $ns

	;# setup read/write callbacks
	fileevent $ns readable [list read_data global_app_p]
}

;# register server function and wait forever
proc server_register {gap} {
	upvar #0 $gap global_app_p
	set fd [dict get $global_app_p log_fd]
	log $fd "server_register "
	set ns [socket -server [list server_process global_app_p] 7707]
	log $fd "server registered sock $ns, waiting for clients..."
	dict set global_app_p server_sock $ns
	vwait forever
}

proc daemon_process {fd} {
	global global_app_p
	dict set global_app_p log_fd $fd
	log $fd "daemon pid [pid]"

	server_register global_app_p
}

proc mysigterm {} {
	puts "sigterm"
	set fd [open term.log a+]
	fconfigure $fd -buffering none
	puts $fd "[get_time]: sigterm"
	close $fd
}

proc start_daemon {fd} {
	close stdin
	close stdout
	close stderr
	set pro [fork]
	if {$pro} {
		exit 0
	}
	id process group set

	set pro [fork]
	if {$pro} {
		exit -1
	}
	set sd [open /dev/null r]
	set sd [open /dev/null w]
	set sd [open /dev/null w]
	cd /
	umask 022
	return [id process]
}


;#
;# start here
;#

;# check if pidfile exists
if {[file exists $pidfile_path]} {
	puts "error: $$pidfile_path already exists"
	exit -1
}

;# delete log file
file delete $log_file

;# open and configure file for new logs
set fd [open $log_file a+]
fconfigure $fd -buffering none
log  $fd "startup [pid]"

;# start daemon process
;# uncomment when daemon required
#set daem_id [start_daemon $fd]
set daem_id [pid]
log $fd "start daemon pid $daem_id"

;# create pidfile
set pid_fd [open $pidfile_path w]
puts $pid_fd "$daem_id"
close $pid_fd


;# configure signals
signal ignore  SIGHUP
signal unblock {QUIT TERM}
signal trap QUIT shutdown
signal trap TERM mysigterm

;# start daemon processing
daemon_process $fd

