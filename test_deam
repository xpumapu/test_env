#!/usr/bin/tclsh

package require Tclx

source lib/lib-daem.tcl

set log_file "/tmp/daem.log"




;# gets curent date and time
proc get_time {} {
	return [clock format [clock seconds]]
}

;# log message to file
;# dfd - debug file descriptor, open for writing
;# msg - text message
proc log {dfd msg} {
	puts $dfd "[get_time]: $msg"
}

proc shutdown {} {
	;#whatever cleanup you need to do
	set fd [open shut.log a+]
	fconfigure $fd -buffering none
	puts $fd "[get_time]: Main process shutdown"
	close $fd
	exit
}

proc read_data {chan fd} {
	log $fd "read data"
	if {[eof $chan] || [catch {gets $chan line}]} {
		log $fd "closing socket $chan"
		close $chan
	} else {
		log $fd "received: $line"
		puts $chan $line
		set ls_out [exec ls]
		puts $chan $ls_out
	}
}

;# server function processing each new connected client
proc server_process {fd chan addr port} {
	fconfigure $chan -buffering line -blocking 0
	log $fd "server process: chan $chan addr $addr port $port"

	;# setup read/write callbacks
	fileevent $chan readable [list read_data $chan $fd]
}

;# register server function and wait forever
proc server_register {fd} {
	set ns [socket -server [list server_process $fd] 7707]
	log $fd "server registered, waiting for clients..."
	vwait forever
}

proc daemon_process {fd} {
	log $fd "daemon pid [pid]"

	server_register $fd
}

proc mysigterm {} {
	set fd [open term.log a+]
	fconfigure $fd -buffering none
	puts $fd "[get_time]: sigterm"
	close $fd
}

proc start_daemon {fd} {
	close stdin
	close stdout
	close stderr
	set pro [fork]
	if {$pro} {
		exit 0
	}
	id process group set

	set pro [fork]
	if {$pro} {
		exit -1
	}
	set sd [open /dev/null r]
	set sd [open /dev/null w]
	set sd [open /dev/null w]
	cd /
	umask 022
	return [id process]
}


;#
;# start here
;#

;# check if pidfile exists





;# delete log file
file delete $log_file

;# open and configure file for new logs
set fd [open $log_file a+]
fconfigure $fd -buffering none
log  $fd "startup [pid]"

;# start daemon process
set daem_id [start_daemon $fd]
log $fd "start daemon pid $daem_id"

;# create pidfile
set pid_fd [open "$pidfile_dir/$argv0.pid" w]
puts $pid_fd "$daem_id"
close $pid_fd


;# configure signals
signal ignore  SIGHUP
signal unblock {QUIT TERM}
signal trap    QUIT shutdown
signal trap TERM mysigterm

;# start daemon processing
daemon_process $fd

